library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn = makeLearner("classif.lda")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method = "CV", stratify = TRUE)
## Do the resampling:
r <- resample(learner = lrn, task = task, resampling = rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
## Get the mean misclassification error:
r$aggr
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
## Get the mean misclassification error:
r$aggr
library(tidyverse)
library(mlr)
data(iris)
library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
print("<3")
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
library("tidyverse")
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("../jsbach_chorals_harmony.data")
bach
bach <- read_csv("../jsbach_chorals_harmony.data")
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach
select(bach, 1)
select(bach, pitch)
select(bach, pitch) %>% slice(1)
bach[3,1]
bach[1,3]
bach[1,4]
bach[1,5]
bach[1,5][[1]]
bach[1,5][[1]][[1]]
bach[1,5][[1]][[1]][[1]]
typeof(bach[1,5])
typeof(bach[1,5][[1]])
typeof(bach[1,5][[1]][[1]])
bach <-
bach %>%
select(seq, event, fund, acc) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
# as.list() %>%
map(function(x) str_which(x, "YES")-1)
)
bach <-
bach %>%
select(seq, event, fund, acc) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
as.list() %>%
map(function(x) str_which(x, "YES")-1)
)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
typeof(bach[1,5])
typeof(bach[1,5][[1]])
typeof(bach[1,5][[1]][[1]])
bach
bach[1,5]
bach[1,5][[1]]
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach <-
bach %>%
select(seq, event, fund, acc) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
# unname() %>%
?unlist(names=FALSE) %>%
map(function(x) str_which(x, "YES")-1)
)
?unlist
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach
bach$pitch
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach$pitch
bach$fund
bach$pitch
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach$pitch
bach$pitch$1000
bach$pitch[[1000]]
typeof(bach$pitch[[1000]])
is_atomic(bach$pitch[[1000]])
is_atomic(bach$pitch)
unlist(bach$pitch[[1000]])
bach$pitch[[1]]
is_atomic(bach$pitch[[1]])
is_atomic(bach$fund)
str(bach$pitch)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
str(bach$pitch)
is_atomic(bach$pitch[[1]])
bach$pitch[[1]]
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach$pitch[[1]]
library(pryr)
sexp_type(bach)
sexp_type(bach$pitch)
sexp_type(bach$pitch[[1]])
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
