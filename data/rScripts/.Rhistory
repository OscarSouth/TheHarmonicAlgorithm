library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn = makeLearner("classif.lda")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method = "CV", stratify = TRUE)
## Do the resampling:
r <- resample(learner = lrn, task = task, resampling = rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
## Get the mean misclassification error:
r$aggr
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
## Get the mean misclassification error:
r$aggr
library(tidyverse)
library(mlr)
data(iris)
library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
print("<3")
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
library("tidyverse")
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("../jsbach_chorals_harmony.data")
bach
bach <- read_csv("../jsbach_chorals_harmony.data")
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
library(RMariaDB)
library(tidyverse)
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
db <- dbConnect(MariaDB(), group = "hask")
db <- dbConnect(MariaDB(), group = "hask")
db
dbListTables(con)
dbListTables(db)
dbWriteTable(db, "mtcars", mtcars)
dbListTables(db)
dbListFields(db, "mtcars")
dbReadTable(db, "mtcars")
list(c(1, 1, 1), c(2, 2, 2), c(3, 3, 3))
# You can fetch all results:
res <- dbSendQuery(db, "SELECT * FROM mtcars WHERE cyl = 4")
dbFetch(res)
dbClearResult(res)
# Or a chunk at a time
res <- dbSendQuery(db, "SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
tibble(list(c(1, 1, 1), c(2, 2, 2), c(3, 3, 3)),c("a","b","c")
tibble("one"=list(c(1, 1, 1), c(2, 2, 2), c(3, 3, 3)),"two"=c("a","b","c"))
ts <- tibble("one"=list(c(1, 1, 1), c(2, 2, 2), c(3, 3, 3)),"two"=c("a","b","c"))
ts
dbWriteTable(db, "test", ts)
# Disconnect from the database
dbDisconnect(db)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(db)
bach$pitch
bind_rows(lapply(bach$pitch, as.data.frame.list))
?bind_rows
bind_cols(lapply(bach$pitch, as.data.frame.list))
bind_rows(lapply(bach$pitch, as.data.frame.list))
?bind_rows
combine(lapply(bach$pitch, as.data.frame.list))
bach$pitch
bach$pitch[0:10,]
bach$pitch[0:10]
bach$pitch[9:19]
bind_rows(lapply(bach$pitch[9:19], as.data.frame.list))
Reduce(rbind, bach$pitch[9:19])
?Reduce(rbind, bach$pitch[9:19])
Reduce(rbind, bach$pitch[12:19])
bach$pitch
tibble(Reduce(rbind, bach$pitch[12:19]))
Reduce(rbind, bach$pitch[12:19])
bach$pitch
map(length, bach$pitch)
Map(length, bach$pitch)
?Reduce(rbind, bach$pitch[12:19])
Map(bach$pitch, length)
map(bach$pitch, length)
educe(bach$pitch[12:19], rbind)
reduce(bach$pitch[12:19], rbind)
rbind?
?rbind
?rbind
max( map(bach$pitch, length) )
max( map(bach$pitch, length) )
map(bach$pitch, length)
map(bach$pitch, c)
map(bach$pitch, c)
bach$pitch %>%
map(length) %>%
map(c)
bach$pitch %>%
map(length)# %>%
bach$pitch %>%
map(length) %>%
map(c)
bach$pitch %>%
map(length) %>%
rapply(c)
bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
max())
reduce(bach$pitch[12:19],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9:19],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9,19],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9,19],
rbind)
reduce(bach$pitch[9,19],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9:19],
rbind)
reduce(bach$pitch[9:19],
rbind,rep(0,6))
reduce(bach$pitch[9:19],
rbind,
rep(0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
reduce(bach$pitch[9:19],
rbind,
rep(9,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
rep(9,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max())
/reduce(bach$pitch[9:19],
rbind,
rep(9,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
?reduce(bach$pitch[9:19],
rbind,
rep(9,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()))
x <- list(c(0, 1), c(2, 3), c(4, 5))
x
x %>% reduce(c)
matrix(, nrow = 15, ncol = 0)
matrix(,,5)
matrix(,0,5)
matrix(,0,bach$pitch %>%
reduce(bach$pitch[9:19],
reduce(bach$pitch[9:19],
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
)
bach$pitch[9:19]
bachMatrix <-
reduce(bach$pitch[9:19],
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
)
bachMatrix[,1]
bachMatrix[,,1]
bachMatrix[1,]
bachMatrix[,1]
bachMatrix[,2]
bachMatrix <-
reduce(bach$pitch[9:19],
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>%
unname()
bachMatrix[,2]
bachMatrix <-
reduce(bach$pitch[9:19],
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>% unname()
bachMatrix[,2]
bachMatrix
bachMatrix <-
reduce(bach$pitch,
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>% unname()
bachMatrix
bachMatrix[,1]
typof(bachMatrix[,1])
typeof(bachMatrix[,1])
integer(bachMatrix[,1])
as.integer(bachMatrix[,1])
bach
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_factor(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
split(bach, bach$seq)
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
) %>%
split(bach$seq)
bach
typeof(bach)
length(bach)
length(bach)
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
) # %>%
bachMatrix <-
reduce(bach$pitch,
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>% unname()
bachMatrix
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
) # %>%
bach <<-
reduce(bach$pitch,
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>% unname()
bach$pitch[0:10]
bach$pitch
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach$pitch[0:10]
bach$pitch
bach
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
bach$pitch
bach$pitch[0:10]
bach$pitch[0:20]
bachMatrix <-
reduce(bach$pitch,
rbind,
matrix(,0,bach$pitch %>%
map(length) %>%
rapply(c) %>%
max()
)
) %>%
unname() %>%
as.integer()
