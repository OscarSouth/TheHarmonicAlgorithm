library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn = makeLearner("classif.lda")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method = "CV", stratify = TRUE)
## Do the resampling:
r <- resample(learner = lrn, task = task, resampling = rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
## Get the mean misclassification error:
r$aggr
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
## Get the mean misclassification error:
r$aggr
library(tidyverse)
library(mlr)
data(iris)
library(tidyverse)
library(mlr)
data(iris)
## Define the task:
task <- makeClassifTask(id="tutorial", data=iris, target="Species")
print(task)
## Define the learner:
lrn <- makeLearner("classif.naiveBayes")
print(lrn)
## Define the resampling strategy:
rdesc <- makeResampleDesc(method="CV", stratify=TRUE)
## Do the resampling:
r <- resample(learner=lrn, task=task, resampling=rdesc)
print(r)
## Get the mean misclassification error:
r$aggr
print("<3")
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach
bach <- read.csv("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
library("tidyverse")
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/jsbach_chorals_harmony.data")
bach
bach <- as_tibble("../jsbach_chorals_harmony.data")
bach
bach <- read_csv("../jsbach_chorals_harmony.data")
source('~/haskellProjects/theHarmonicAlgorithm/data/rScripts/explore.R', echo=TRUE)
setwd("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/rScripts")
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
library("tidyverse")
setwd("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/rScripts")
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
bach
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
bach
bach$pitch
?str_which
bach$pitch[,975]
bach$pitch[975,]
bach[,975]$pitch
bach[,975]
bach[975,]
bach[975,]$pitch
runscript()
list(c(1,2,3))
list((c(1,2,3),c(4,5,6)))
list(c(1,2,3),c(4,5,6))
list(c(1,2,3),c(4,5,6),c(7,8,9))
rep(x_hs, n_hs)
rep(3, 3)
list(rep(3, 3))
list(rep(c(3), 3))
list(rep(c(1,2,3), 3))
list(1,2,3)
as.list(rep(3, 3))
as.list(rep(3, 4))
as.list(rep(3, 3))
as.list(rep(c(2), 3))
as.list(rep(c(1,2,3), 3))
as.list(rep(1, 3))
list(c(1,2,3),c(4,5,6))
list(c(1,2,3),c(4,5,6),c(7,8,9))
list(rep(3, 3),rep(3, 3),rep(3, 3))
list(rep(rep(3, 3)))
list(rep(rep(3, 3),3))
as.list(rep(rep(3, 3),3))
list(rep(3, 3),rep(3, 3),rep(3, 3))
list(1,2,3))
list(1,2,3)
list(rep(3,3))
as.list(rep(3,3))
library(tibble)
library(dplyr)
setwd("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/rScripts")
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
library(readr)
setwd("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/rScripts")
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
library(purrr)
setwd("/home/oscarsouth/haskellProjects/theHarmonicAlgorithm/data/rScripts")
bach <- read_csv("../jsbach_chorals_harmony.data",
col_names = c(
"seq", "event",
"0", "1", "2", "3", "4", "5",
"6", "7", "8", "9", "10", "11",
"fund", "acc", "label"
), cols(
seq = col_character(),
event = col_integer(),
`0` = col_character(),
`1` = col_character(),
`2` = col_character(),
`3` = col_character(),
`4` = col_character(),
`5` = col_character(),
`6` = col_character(),
`7` = col_character(),
`8` = col_character(),
`9` = col_character(),
`10` = col_character(),
`11` = col_character(),
fund = col_character(),
acc = col_integer(),
label = col_character()
)
)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
library(stringr)
bach <-
bach %>%
select(seq, event, fund, acc, label) %>%
add_column(pitch = bach %>%
select(`0`:`11`) %>%
t() %>%
as.data.frame() %>%
unname() %>%
map(function(x) str_which(x, "YES")-1)
)
Sys.Date()
Sys.Time()
Sys.time()
